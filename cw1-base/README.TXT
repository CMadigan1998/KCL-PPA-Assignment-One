The purpose of this project was to view and modify a portfolio loaded from a spreadsheet on disk.
The project consists of four classes written by Prof. Michael Kolling, whilst I modified PropertyViewer and PropertyViewerGUI to add the functionality outlined by the task sheet.
My first  modification made was to the fields within the PropertyViewer class. I added a private field called "currentProperty" which is used to store a Property object. The rest of the fields added we of the tpye int named "currentPropertyIndex", "numberOfPropertiesViewed", and "totalViewedPrice".
The next modification was made to the PropertyViewer constructor. I modified the constructor to automatically display the first property in the portfolio.
I then modified the "nextProperty" method to first increment "currentPropertyIndex". I then used a conditional statment to ensure the current index is within the range of property index of the portfolio. If it isn't the method updates the GUI window to display the current property, if it is, an error message is written to the console and the index is set to the last property viewed.
At the end of the "nextProperty" method, the price of the property is added to the totalViewedPrice field as long as the index was within range.
The "previousProperty" method shows the previous property of the portfolio whilst also checking if the index is within range and updating the "totalViewedPrice" field.
These two methods use a considerable amount of similar code, as a possible amendment to the code, I could put the index check and GUI window update into a seperate function that takes the currentyPropertyIndex as a parameter. This is then called from either the "nextProperty" or the "previousProperty" function which would modify the "currentPropertyIndex" as needed.
The fourth method modified was the "toggleFavourite" method. This method calls a function from within the "currentProperty" index that flags the property as a favourite. A function is then called from the "gui" object that updates the window to display the new information. 
After I completed the base tasks I moved onto the challenge tasks which started with me modifying the "viewMap" method to open a webbrowser tab that shows the location of the current property being viewed on Google Maps.
I then created two methods that return the type int and that take no parameters called "getNumberOfPropertiesViewed" and "averagePropertyPrice". "getNumberOfPropertiesViewed" returns the value stored in the field "numberOfPropertiesViewed" allowing it to be used by external methods in other classes. "averagePropertyPrice" first calculates the average price of all the properties that have been viewed so far, and then returns that value allowing it to be used by other classes too.
I then needed to aadd a button on the GUI window that opens a seperate window showing statistics about the current session of the appliccation. I did this by first creating as new JButton object in the "makeFrame" method. I then assign a listener to this button which waits for an ActionEvent, in this instance would be a mouse click. After the event has occurred, the "showStatisticsButton" method is called.
"showStatisticsButton" is a method that I had written to first create a new JFrame object that produces an empty window with the title "Session Statistics". I then create a new JPanel that is used to show the content of the window. After that i create three new JLabel objects that display text. The first being used to show the statistics are from the current session, the second shows the average prices of the properties viewed, which is produced by calling the "averagePropertyPrice" method and the third which displays the total number of properties viewd, which is collected using the "getNumberOfPropertiesViewed" method".
Once these JLabels have been created and added to the "content" panel, I added the panel onto the "statisticsFrame" object and centered it within the window. After that I call a function called "pack" from the JFrame object which makes the window lage enough to accomidate the componenets on screen.
Once that has been done I called another method from the JFrame object which shows the window on screen. 